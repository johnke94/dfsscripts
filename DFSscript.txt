/* Trigger to put a random number in the import sheets, in order to get around the Google cache issue
*/

function onOpen(e){
  
  SpreadsheetApp.getUi().createMenu('Rand').addItem('New Rand', 'changeRandValue').addToUi();
  
}


function changeRandValue(){
  
  SpreadsheetApp.getActiveSpreadsheet().getSheetByName("Pitcher Import").getRange('V1').setValue(Math.random()*10);
  
}

/* Calculates a potential score for hitters
*/

function HitterNormal(single,double,triple,homer,rbi,run,walk,steal) {
  
  var n_single = single * 3;
  var n_double = double * 6;
  var n_triple = triple * 9; 
  var n_homer = homer * 12;
  var n_rbi = rbi * 3.5;
  var n_run = run * 3.2;
  var n_walk = walk * 3;
  var n_steal = steal * 6;
  var n_hbp = 0.01 * 3;
  
  var result = n_single + n_double + n_triple + n_homer + n_rbi + n_run + n_walk + n_steal + n_hbp;
  
  return result;
  
}

/* Calculates fanduel projection for pitchers
*/

function PitcherNormal(win,er,so,ip) {
  
  
  var n_win = win * 6;
  var n_qs = 0;
  var n_er = er * -3;
  var n_ip = ip * 3;
  var n_so = so * 3;
  
  if (ip > 6 && er <= 3) {
    n_qs = 4;
  }
  
  var result = n_win + n_qs + n_er + n_ip + n_so;
  
  return result;
  
}

/* Same function as PitcherNormal. 
Instead of calculating per player, calculates based on an array of player names. */

function PitcherNormalArray (win, er, so, ip) {
  
  var name_data = getStatArray(1, "Pitchers");
  var result = [];
  var n_win;
  var n_qs;
  var n_er;
  var n_ip;
  var n_so;
  var i;
  
  for (i = 0; i < name_data.length; i++) {
    
    n_win = win[i] * 6;
    n_er = er[i] * -3;
    n_ip = ip[i] * 3;
    n_so = so[i] * 3;
  
    if (ip[i] > 6 && er[i] <= 3) {
      n_qs = 4;
    } else n_qs = 0;
  
    result[i] = n_win + n_qs + n_er + n_ip + n_so;
  }
  
  return result;
}
    

/* Calculates fanduel project for batters based on raw stats
*/

function StatProj(G,single,double,triple,homer,rbi,run,walk,iwalk,steal,hbp){
  
  
  
  var exp_single = single/G * 3;
  var exp_double = double/G * 6;
  var exp_triple = triple/G * 9;
  var exp_homer = homer/G * 12;
  var exp_rbi = rbi/G * 3.5;
  var exp_run = run/G * 3.2;
  var exp_walk = (walk + iwalk)/G * 3;
  var exp_steal = steal/G * 6;
  var exp_hbp = hbp/G * 3;
  
  var result = exp_single + exp_double + exp_triple + exp_homer + exp_rbi + exp_run + exp_walk + exp_steal + exp_hbp;
  
  return result;

}

/* Similar functionality to StatProj, but instead calculates based on array of batter names.
*/


function BatterStatProjArray(pos,G,single,double,triple,homer,rbi,run,walk,iwalk,steal,hbp){
  
  var exp_single;
  var exp_double;
  var exp_triple;
  var exp_homer;
  var exp_rbi;
  var exp_run;
  var exp_walk;
  var exp_steal;
  var exp_hbp;
  var result = [];
  var i;
  var proj;
  
  var sheetname = getPosSheetName(pos);
  
  var name_data = getStatArray(1, sheetname);  
  
  for (i = 0; i < name_data.length; i++) {
    
    exp_single = single[i]/G[i] * 3;
    exp_double = double[i]/G[i] * 6;
    exp_triple = triple[i]/G[i] * 9;
    exp_homer = homer[i]/G[i] * 12;
    exp_rbi = rbi[i]/G[i] * 3.5;
    exp_run = run[i]/G[i] * 3.2;
    exp_walk = (walk[i]/G[i] + iwalk[i]/G[i])*3;
    exp_steal = steal[i]/G[i] * 6;
    exp_hbp = hbp[i]/G[i] * 3;
  
    proj = exp_single + exp_double + exp_triple + exp_homer + exp_rbi + exp_run + exp_walk + exp_steal + exp_hbp;
    
    if (isNaN(proj)) {
      result[i] = "";
    } else result[i] = proj;
    
  }
  
  return result;
}


/* Returns an array that has all the fanduel projections from each sheet
*/

function projMatchArray(dummy) {
  
  var i;
  var k;
  var searchref;
  var searchstat;
  var key;
  var found = [];
  var searchData;
  var r_index;
  var ss = SpreadsheetApp.getActive();
  
  var pitch_Data = ss.getSheetByName('Pitchers').getDataRange().getValues();
  var first_Data = ss.getSheetByName('First Base').getDataRange().getValues();
  var second_Data = ss.getSheetByName('Second Base').getDataRange().getValues();
  var third_Data = ss.getSheetByName('Third Base').getDataRange().getValues();
  var short_Data = ss.getSheetByName('Shortstop').getDataRange().getValues();
  var catch_Data = ss.getSheetByName('Catcher').getDataRange().getValues();
  var of_Data = ss.getSheetByName('Outfield').getDataRange().getValues(); 
  
  
  
  var pos = getStatArray(1, "Raw Fanduel Data");
  var name = getStatArray(3, "Raw Fanduel Data");
  
 
  
  for (i = 0; i < pos.length; i++) {
    
    if (pos[i] == 'P') {
      r_index = 37;
      searchData = pitch_Data;
    } 
    else {
      r_index = 41;
      
        if (pos[i] == '1B') {
          searchData = first_Data;
        } else if (pos[i] == '2B') {
          searchData = second_Data;
        } else if (pos[i] == '3B') {
          searchData = third_Data;
        } else if (pos[i] == 'SS') {
          searchData = short_Data;
        } else if (pos[i] == 'C') {
          searchData = catch_Data;
        } else if (pos[i] == 'OF') {
          searchData = of_Data;
        }
    }      
           
    key = name[i];
    found[i] = 0;
      
    for (k = 0; k < searchData.length; k++) {
        
      searchref = searchData[k][1];
      searchstat = searchData[k][r_index];
            
      if (key == searchref && searchref != "" && searchstat != "") {
        found[i] = searchData[k][r_index];
        break;
      }
    }
  }
  
  return found;
  
}

/* returns a single column array based on key and sheet name
*/

function getStatArray(key, sheetName, dummy) {
  
  var i;
     
  var found = [];
  var ss = SpreadsheetApp.getActive().getSheetByName(sheetName);
  var searchData = ss.getDataRange().getValues();
     
  for (i = 1; i < searchData.length; i++) {
    
    found[i-1] = 0;
    
    if (searchData[i][key] != '') {
      found[i-1] = searchData[i][key];
      
    } else {break}
  }
  
  return found;
}

/* refreshes the sheet import of pitcher stats
*/
  
function refreshPitcher(dummy) {
  
  var ss_import = SpreadsheetApp.openById("1Y7Wgc5j1r1tBzQYKn-O_OIQsDE3ODOYheZGTSoE2tFQ");
  var sheet_import = ss_import.getSheetByName("Pitchers Import");
  var ss_replace = SpreadsheetApp.getActive();
  var sheet_replace = ss_replace.getSheetByName("Pitcher Import");
  
  var import_range = sheet_import.getDataRange().getValues();
  var range_length = import_range.length;
  
  SpreadsheetApp.flush();
  
  sheet_replace.getRange(1, 1, range_length, 20);
}

/* refreshes the sheet import of batter stats
*/
  
function refreshBatter(dummy) {
  
  var ss_import = SpreadsheetApp.openById("1Y7Wgc5j1r1tBzQYKn-O_OIQsDE3ODOYheZGTSoE2tFQ");
  var sheet_import = ss_import.getSheetByName("Batters Import");
  var ss_replace = SpreadsheetApp.getActive();
  var sheet_replace = ss_replace.getSheetByName("Batter Import");
  
  var import_range = sheet_import.getDataRange().getValues();
  var range_length = import_range.length;
  
  SpreadsheetApp.flush();
  
  sheet_replace.getRange(1, 1, range_length, 43);
}

/* returns pitchers stats info based on array of pitcher names
*/

function pitcherStatArray(dummy) {
  
  var i;
  var k;
  var j;
  var searchref;
  var searchstat;
  var key;
  var found = [];
  var ss = SpreadsheetApp.getActive(); 
  
  var name = getStatArray(1, "Pitchers");
  var pitchData = ss.getSheetByName("Pitcher Import").getRange(1, 1, 66, 20).getValues();
  
  for (i = 0; i < name.length; i++) {    
           
    key = name[i];
    found[i] = ["N/A"];
      
    for (k = 0; k < pitchData.length; k++) {
        
      searchref = pitchData[k][1];
      searchstat = pitchData[k];
            
      if (key == searchref && searchref != "" && searchstat != []) {
        
        for (j = 7; j < searchstat.length; j++) {
           
          found[i][j-7] = pitchData[k][j];
         
        }
        break;
      }
    }
  }
  
  return found;
  
}       
   
/* returns pitchers projection info based on array of pitchers names
*/

function pitcherProjArray(dummy) {
  
  var i;
  var k;
  var j;
  var searchref;
  var searchstat;
  var key;
  var found = [];
  var ss = SpreadsheetApp.getActive(); 
  
  var name = getStatArray(1, "Pitchers");
  var pitchData = ss.getSheetByName("Pitcher Import").getRange(68, 1, 66, 16).getValues();
  
  for (i = 0; i < name.length; i++) {    
           
    key = name[i];
    found[i] = ["N/A"];
      
    for (k = 0; k < pitchData.length; k++) {
        
      searchref = pitchData[k][0];
      searchstat = pitchData[k];
            
      if (key == searchref && searchref != "" && searchstat != []) {
        
        for (j = 3; j < searchstat.length-1; j++) {
           
          found[i][j-3] = pitchData[k][j];
         
        }
        break;
      }
    }
  }
  
  return found;
  
} 

/* returns batter stat info
*/

function batterStatArray(pos, dummy) {
  
  var i;
  var k;
  var j;
  var searchref;
  var searchstat;
  var key;
  var found = [];
  var ss = SpreadsheetApp.getActive(); 
  var posname = getPosSheetName(pos);
  
  var name = getStatArray(1, posname);
  var battData = ss.getSheetByName("Batter Import").getRange(1, 21, 600, 23).getValues();
  
  for (i = 0; i < name.length; i++) {    
           
    key = name[i];
    found[i] = ["N/A"];
      
    for (k = 0; k < battData.length; k++) {
        
      searchref = battData[k][1];
      searchstat = battData[k];
            
      if (key == searchref && searchref != "" && searchstat != []) {
        
        for (j = 3; j < searchstat.length; j++) {
           
          found[i][j-3] = battData[k][j];
         
        }
        break;
      }
    }
  }
  
  return found;
  
}       
   
/* returns batters projection info
*/

function batterProjArray(pos, dummy) {
  
  var i;
  var k;
  var j;
  var searchref;
  var searchstat;
  var key;
  var found = [];
  var ss = SpreadsheetApp.getActive(); 
  var posname = getPosSheetName(pos);
  
  var name = getStatArray(1, posname);
  var battData = ss.getSheetByName("Batter Import").getRange(1, 1, 600, 18).getValues();
  
  
  for (i = 0; i < name.length; i++) {    
           
    key = name[i];
    found[i] = ["N/A"];
      
    for (k = 0; k < battData.length; k++) {
        
      searchref = battData[k][0];
      searchstat = battData[k];
            
      if (key == searchref && searchref != "" && searchstat != []) {
        
        for (j = 4; j < searchstat.length; j++) {
           
          found[i][j-4] = battData[k][j];
         
        }
        break;
      }
    }
  }
  
  return found;
  
} 

/* returns position sheet name based on position
*/

function getPosSheetName(pos){
  
  var sheetName;
  
  if (pos == "1B") {
    sheetName = "First Base";
  } else if (pos == "2B") {
    sheetName = "Second Base";
  } else if (pos == "3B") {
    sheetName = "Third Base";
  } else if (pos == "C") {
    sheetName = "Catcher";
  } else if (pos == "SS") {
    sheetName = "Shortstop";
  } else if (pos == "OF") {
    sheetName = "Outfield";
  }
  
  return sheetName;
}

